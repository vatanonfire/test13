import express from 'express';
import { PrismaClient } from '@prisma/client';
import { authenticateToken } from '../middleware/auth';

const router = express.Router();
const prisma = new PrismaClient();

// Get all rituals for a user (calendar rituals)
router.get('/', authenticateToken, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    
    console.log('üîç Backend - Fetching rituals for user:', userId);
    
    const rituals = await prisma.ritual.findMany({
      where: { userId },
      orderBy: { date: 'asc' }
    });

    console.log('‚úÖ Backend - Found rituals:', rituals.length);
    return res.json({ success: true, data: rituals });
  } catch (error) {
    console.error('üí• Backend - Error fetching rituals:', error);
    return res.status(500).json({ success: false, message: 'Rit√ºeller getirilemedi' });
  }
});

// Get available rituals for purchase (dummy data)
router.get('/available', async (req, res) => {
  try {
    console.log('üîç Backend - Fetching available rituals for purchase');
    
    // Dummy data for available rituals
    const availableRituals = [
      {
        id: 'new-moon-ritual',
        name: 'Yeni Ay Rit√ºeli',
        shortDescription: 'Yeni ba≈ülangƒ±√ßlar ve niyet belirleme.',
        description: 'Yeni ay d√∂neminde yapƒ±lan bu rit√ºel, hayatƒ±nƒ±zda yeni ba≈ülangƒ±√ßlar yapmanƒ±za ve hedeflerinizi belirlemenize yardƒ±mcƒ± olur.',
        category: 'Ay Rit√ºelleri',
        difficulty: 'Kolay',
        price: 150,
        duration: '30 dakika',
        materials: ['Beyaz mum', 'Kaƒüƒ±t ve kalem', 'Sakin bir ortam'],
        steps: [
          'Yeni ay gecesinde sakin bir ortam hazƒ±rlayƒ±n',
          'Beyaz mumu yakƒ±n ve rahat bir pozisyon alƒ±n',
          'Kaƒüƒ±da yeni d√∂nemde ger√ßekle≈ütirmek istediƒüiniz hedefleri yazƒ±n',
          'Her hedefi okurken mumun ƒ±≈üƒ±ƒüƒ±na odaklanƒ±n',
          'Yazdƒ±ƒüƒ±nƒ±z kaƒüƒ±dƒ± g√ºvenli bir yerde saklayƒ±n'
        ],
        specialNotes: 'Bu rit√ºeli yeni ay gecesinde yapmak en etkilidir.',
        benefits: ['Yeni ba≈ülangƒ±√ßlar', 'Niyet belirleme', 'Odaklanma artƒ±≈üƒ±']
      },
      {
        id: 'full-moon-ritual',
        name: 'Dolunay Rit√ºeli',
        shortDescription: 'Enerji temizleme ve ≈ü√ºkran rit√ºeli.',
        description: 'Dolunay d√∂neminde yapƒ±lan bu rit√ºel, negatif enerjileri temizler ve ≈ü√ºkran duygularƒ±nƒ±zƒ± g√º√ßlendirir.',
        category: 'Ay Rit√ºelleri',
        difficulty: 'Orta',
        price: 200,
        duration: '45 dakika',
        materials: ['Temizlik tuzu', '≈ûifalƒ± otlar', 'Su', 'Mum'],
        steps: [
          'Dolunay gecesinde banyo hazƒ±rlayƒ±n',
          'Suya tuz ve ≈üifalƒ± otlarƒ± ekleyin',
          'Mumu yakƒ±n ve banyoya girin',
          'Negatif enerjilerin temizlendiƒüini d√º≈ü√ºn√ºn',
          'Hayatƒ±nƒ±zdaki g√ºzel ≈üeyler i√ßin ≈ü√ºkredin'
        ],
        specialNotes: 'Dolunay gecesinde yapƒ±lmasƒ± √∂nerilir.',
        benefits: ['Enerji temizleme', '≈û√ºkran artƒ±≈üƒ±', 'Ruhsal denge']
      }
    ];

    console.log('‚úÖ Backend - Returning available rituals:', availableRituals.length);
    return res.json({ success: true, data: availableRituals });
  } catch (error) {
    console.error('üí• Backend - Error fetching available rituals:', error);
    return res.status(500).json({ success: false, message: 'Mevcut rit√ºeller getirilemedi' });
  }
});

// Get rituals for a specific date range
router.get('/date-range', authenticateToken, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { startDate, endDate } = req.query;

    if (!startDate || !endDate) {
      return res.status(400).json({ success: false, message: 'Ba≈ülangƒ±√ß ve biti≈ü tarihi gerekli' });
    }

    const rituals = await prisma.ritual.findMany({
      where: {
        userId,
        date: {
          gte: new Date(startDate as string),
          lte: new Date(endDate as string)
        }
      },
      orderBy: { date: 'asc' }
    });

    return res.json({ success: true, data: rituals });
  } catch (error) {
    console.error('Error fetching rituals by date range:', error);
    return res.status(500).json({ success: false, message: 'Rit√ºeller getirilemedi' });
  }
});

// Create a new ritual
router.post('/', authenticateToken, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { title, description, date, time, icon, color } = req.body;

    if (!title || !date || !time) {
      return res.status(400).json({ success: false, message: 'Ba≈ülƒ±k, tarih ve saat gerekli' });
    }

    const ritual = await prisma.ritual.create({
      data: {
        title,
        description: description || '',
        date: new Date(date),
        time,
        icon: icon || 'moon',
        color: color || 'bg-purple-100 border-purple-300 text-purple-800',
        userId
      }
    });

    return res.status(201).json({ success: true, data: ritual });
  } catch (error) {
    console.error('Error creating ritual:', error);
    return res.status(500).json({ success: false, message: 'Rit√ºel olu≈üturulamadƒ±' });
  }
});

// Update a ritual
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { id } = req.params;
    const { title, description, date, time, icon, color, isCompleted } = req.body;

    // Check if ritual belongs to user
    const existingRitual = await prisma.ritual.findFirst({
      where: { id, userId }
    });

    if (!existingRitual) {
      return res.status(404).json({ success: false, message: 'Rit√ºel bulunamadƒ±' });
    }

    const ritual = await prisma.ritual.update({
      where: { id },
      data: {
        ...(title && { title }),
        ...(description !== undefined && { description }),
        ...(date && { date: new Date(date) }),
        ...(time && { time }),
        ...(icon && { icon }),
        ...(color && { color }),
        ...(isCompleted !== undefined && { isCompleted })
      }
    });

    return res.json({ success: true, data: ritual });
  } catch (error) {
    console.error('Error updating ritual:', error);
    return res.status(500).json({ success: false, message: 'Rit√ºel g√ºncellenemedi' });
  }
});

// Delete a ritual
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { id } = req.params;

    // Check if ritual belongs to user
    const existingRitual = await prisma.ritual.findFirst({
      where: { id, userId }
    });

    if (!existingRitual) {
      return res.status(404).json({ success: false, message: 'Rit√ºel bulunamadƒ±' });
    }

    await prisma.ritual.delete({
      where: { id }
    });

    return res.json({ success: true, message: 'Rit√ºel silindi' });
  } catch (error) {
    console.error('Error deleting ritual:', error);
    return res.status(500).json({ success: false, message: 'Rit√ºel silinemedi' });
  }
});

// Toggle ritual completion
router.patch('/:id/toggle', authenticateToken, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { id } = req.params;

    // Check if ritual belongs to user
    const existingRitual = await prisma.ritual.findFirst({
      where: { id, userId }
    });

    if (!existingRitual) {
      return res.status(404).json({ success: false, message: 'Rit√ºel bulunamadƒ±' });
    }

    const ritual = await prisma.ritual.update({
      where: { id },
      data: { isCompleted: !existingRitual.isCompleted }
    });

    return res.json({ success: true, data: ritual });
  } catch (error) {
    console.error('Error toggling ritual completion:', error);
    return res.status(500).json({ success: false, message: 'Rit√ºel durumu g√ºncellenemedi' });
  }
});

export default router;